#这是读书笔记
#书名：Linux C 编程从基础到实践(程国钢 张玉兰 编著) 清华大学出版社
#
01, 第一章  Linux 使用基础
    001 mkdir -m 710 chap1
        -m  配置权限选项
        710 每位数字是4+2+1形式
            4:r 2:w 1:x
            首位:目录所有者权限
            中位:组中其他人对目录的权限
            末位:系统中其他人对目录的权限
    002 mkdir -p  /home/case1/case2/case3
        -p  如果中间目录不存在，会自动创建
    003 rmdir chap1
        删除chap1目录，如果目录不为空，抛错
    004 rmdir -p chap/chap1/chap2/chap3/
        删除chap3的同时，如果上一级目录为空，继续删除上一级
        如果某一级有空文件夹或者文件，会报错，但出错之前的文件夹会删除的。
    005 cd c[*?]    注:当前目录下有目录c0000 c1 c2
        cd c*   进入c0000
        cd c?   进入c1
    006 三个特殊目录: /  .  ..
        /   根目录
        .   当前目录
        ..  上一级目录
    007 ubuntu 14.04 自带的所有alias
        alias egrep='egrep --color=auto'
        alias fgrep='fgrep --color=auto'
        alias grep='grep --color=auto'
        alias l='ls -CF'
        alias la='ls -A'
        alias ll='ls -alF'
        alias ls='ls --color=auto'
    008 ls的所有选项
        -a  横着排，包括.开头
        -b  step1:vim \\a   step2:ls (\a)   step3:ls -b (\\a)
            不可输出字符用反斜线加字符列出
        -i  step1:echo "aa" >> a   step2:ls -i (403224 a)   
            step3:echo "bb" >> b   step4:ls -i (403224 a   403229 b)   
            step5:mkdir c   step6:ls -i (403224 a  403229 b  403235 c)
            列出文件i节点的索引信息
        -k  使用1024-byte快，有疑惑
        -m  横着排，用","分割
        -n  用数字的UID, GID代替名称
        -o  显示文件的详细信息，除了组信息
        -p-F    每个文件名后附上一个字符用于说明文件类型
                ""  文本文档，什么都不添加
                "*" 表示可执行的普通文件     
                "/" 表示目录
                "@" 表示符号链接
                "|" 表示FIFOs
                "=" 表示套接字(sockets)
        -q  用"?"代替不可输出的字符
        -r  逆序
        -s  文件名+文件大小
        -t  时间顺序
        -u  文件上次被访问的时间，排序
        -x  横着排，不包括.开头
        -A  显示除"."和".."外的所有文件
        -B  不输出"~"结尾的备份文件
        -C  按列输出，纵向排序
        -G  输出文件的组信息
        -L  列出文件名而不是链接到的文件
        -N  不限制文件长度
        -Q  把输出的文件名用双引号括起来
        -R  列出所有子目录下的文件
        -S  以文件大小排序
        -X  以文件的扩展名排序
        -1  一行只输出一个文件
    009 linux文件类型
        -   常规文件
        d   目录
        b   块特殊设备
        c   字符特殊设备
        s   信号灯
        m   共享存储器
    010 find-查找文件命令
        find [目录列表] [匹配标准]
        -amin n     查找系统中前n-1到前n分钟访问的文件
        -atime n    查找系统中前n*24到前(n+1)*24小时访问的文件
        -cmin n     查找系统中前n-1到前n分钟被改变状态的文件
        -ctime n    查找系统中前n*24到前(n+1)*24小时访问的文件
        -empty      查找系统中空白的文件，或空白的文件目录，
                    或者目录中没有子目录的文件夹
        -false      查找系统中总是错误的文件
        -fstype type    查找系统中存在于指定文件系统的文件
                        例如ext2
        -name       使用名称匹配，支持通配符 "test*"
        -gid n      查找系统中数字组ID为n的文件
        -group gname    属于gname问你教案组，并且指定组和ID的文件
        -daystart   从现在开始往前24小时的文件
        -depth      
        -follow     遵循通配符链接方式查找
        -maxdepth n 在某个层次目录中按照递减方法查找
        -mount      不在文件系统目录中查找
        find示例
            find /home/TOBEDELETED 或者 find TOBEDELETED
                都是将TOBEDELETED(包含自身)，里面所有文件文件夹都显示出来
            find [目录] -name [通配符]
                如果通配符只有一个匹配项，可以不加单引或双引
                如果通配符有多个匹配项，必须要加单引或双引
                一般，就在通配符上面加上单引或双引吧
    011 cat -v -E a.txt
            会在每行结束的地方增加一个$字符
        cat -n a.txt
            会添加行号，行号占6个位，后面再空一个大位
    012 cp [选项] 源文件或目录 目标文件或目录
        -a  通常在复制目录时使用，保留链接、文件属性，并递归地复制目录。
            作用等同于dpR选项的组合
        -d  复制时保留链接
        -f  删除已经存在的目标文件而不提示
        -i  和f选项相反，在覆盖目标文件之前将给出提示，要求用户确认
            回答y时，目标文件将会被覆盖，是交互式拷贝
        -p  此时cp除复制源文件的内容外，
            还将把其修改时间和访问权限也复制到新文件中。
        -r  若给出的源文件是一个目录文件，
            此时cp将递归复制该目录下所有的子目录和文件，
            此时目标文件必须为一个目录名。
        -l  不进行复制，只是链接文件
            在源和目上任何一个进行修改都会在另外一个上有显示。
    013 mv [选项] 源文件名 目标文件名
        mv [选项] 源目录名 目标目录名
        mv [选项] 文件列表 目录
        -b  覆盖文件或目录的时候，自动备份。
            使用 -S<字符串> 来指定，若未设置，则加"~"
        -i  交互式
        -f  通常，没有任何提示，就是移动
            没有权限就报错
        -u  当被覆盖的文件更新，则不覆盖源文件
    014 wc [选项] 文件列表
        -c  统计字节数
        -l  统计行数
        -w  统计字数
    015 su [选项] user
        -p  执行su时不改变环境参数
        -c  切换到user用户并执行指令(command),然后再切换回原来用户
        -s  指定要执行的shell，默认在/etc/passwd文件中已设置完成，
            若用户需要更改shell时，可采用此参数
        在root账户中,su root是不需要密码的。
    016 sudo [选项] 命令
        -l  显示出执行sudo用户的权限
        -v  sudo在第一次执行时或是在N分钟内没有执行(N预设为5)会问密码，
            这个参数是需要重新进行一次确认，如果超过N分钟，也会询问密码。
        -k  强迫用户在下一次执行sudo时查询密码(不论有没有超过N分钟)
    017 进程管理命令(ps和kill)
        ps [选项]
            -ef 查看所有进程及其PID(进程号)、系统时间、
                命令的详细目录、执行者等。
            -aux    除可显示"-ef"所有内容外，还可以显示CPU及内存占用率、
                    进程状态
            -w  以加宽方式显示，这样可以显示较多的信息
            参数w最多可以写3次，含义是加宽3次，这样能够显示很长的命令行。
        kill [选项] 进程号(PID)
            -s  指定信号发送给进程
    018 IP地址管理命令(ifconfig)
        使用权限是root
        可以查看和配置IP地址、网络掩码、广播地址;有两种使用形式
            1,  ifconfig [选项][网络接口]：用来查看当前系统的配置情况
            2,  ifconfig 网络接口 [选项] 地址:  用来配置指定接口
                (如eth0、eth1)的IP地址，网络掩码、广播地址等。
        [书中，这里的选项没有-，具体原因未知]
        interface   指定的网络接口名，如eth0和eth1
        up          激活指定的网络接口卡
        down        关闭指定的网络接口卡
        broadcast address   设置接口的广播地址
        point to point      启用点对点方式
        address             设置指定接口设备的IP地址
        netmask address     设置接口的子网掩码地址
    019 帮助命令(man)
        man [选项] 命令名称
        -f  只显示出命令的功能，而不显示其中详细的说明文件
        -w  不显示手册页，只显示对应帮助文件的所在位置
        -a  显示所有的手册页，而不是只显示第一个
    020 关机和重启命令(shutdown, halt和reboot)
        shutdown [选项][时间][警告信息]
            a,  需要root权限
            b,  系统关闭之前给系统上的所有登录用户发送一个警告信息。
            c,  时间信息可以是一个精确的时间：  hh:mm
            d,  时间信息可以是一个时间段:       +[分钟数]
            -k  并不真正关机，而只是发出警告信息告诉所有用户
            -f  关机后，立即重新启动
            -h  关机后，不重新启动
            -c  取消一个已经运行的shutdown
        halt [选项]
            a,  需要root权限
            b,  halt是最简单的关机命令，其实际上是调用"shutdown -h"命令
            c,  halt执行时，"杀死"应用进程，文件系统写操作完成后停止内核
            -n  在关机前，不做将内存资料写回硬盘的动作
            -w  并不会真正关机，只是把记录写到/var/log/wtmp文件里
            -d  不把记录写到/var/lob/wtmp文件里 (-n 实际包含 -d)
            -f  强迫关机，不调用shutdown这个指令
            -i  在关机之前先把所有网络相关的装置停止
            -p  当关机的时候，顺便做关闭电源(poweroff)的动作，
                取消一个已经运行的shutdown
        reboot [选项]
            a,  需要root权限
            -n  在关机前，不做将内存资料写回硬盘的动作
            -w  并不会真正关机，只是把记录写到/var/log/wtmp文件里
            -d  不把记录写到/var/lob/wtmp文件里 (-n 实际包含 -d)
            -f  强迫关机，不调用shutdown这个指令
            -i  在关机之前先把所有网络相关的装置停止
    021 查看内核和发行版本号(uname和lsb_release)
        uname [选项]
            -a  显示全部
            -s  显示内核名称
            -n  显示网络节点主机名称
            -r  显示内核发行版
            -v  显示内核版本号
            -m  显示系统硬件主机名称
            -p  显示处理器名称
        lsb_release [选项]
            a,  需要root权限
            -a  显示全部
            -v  显示版本号
            -i  显示发行版作者
            -d  显示当前使用版本的相应
            -r  显示当前使用版本的发行版本号
    022 POSIX   Portable Operation System Interface Of Unix
                可移植操作系统接口
    023 RPM包管理
        rpm -vih file.rpm:  安装一个RPM包
        rpm -e file.rpm:    卸载一个RPM包
        rpm -qpR file.rpm:  查看RPM包的依赖关系
        rpm -q file:        查询系统已安装的RPM包
02, 第二章  在Linux下进行C语言开发
    024 vim三种工作模式
            命令行模式(也叫普通模式，初始模式)
            插入模式
            底行模式
        vim三种工作模式的切换:
            命令行模式  -->  插入模式
                "i" "a" "o"
            插入模式    -->  命令行模式
                "Esc"
            命令行模式  -->  底行模式
                ":" "/" "?"
            底行模式    -->  命令行模式
                "Esc"
    025 vim常用命令
        h <--   j v     k ^     l -->
        ^   一行开头，非空字符
        $   行尾  == "End"
        0   行首  == "Home"
        G   最后一行开头，非空字符
        nG  第n行开头，非空字符
        w   光标向后移动一个单词
        nw  光标向后移动n个单词
        b   光标向前移动一个单词
        nb  光标向前移动n个单词
        e   将光标移动到本单词的最后一个字符
            如果已经在最后一个字符，跳到下一个单词的最后一个字符
        {   移动到前面的"{"处
        }   移动到后面的"}"处
        Ctrl+b  向上翻一页
        Ctrl+f  向下翻一页
        Ctrl+u  向上翻半页
        Ctrl+d  向下翻半页
        Ctrl+y  向上翻一行
        Ctrl+e  向下翻一行
    026 vim复制、粘贴常用命令
        yy  复制光标所在整行
        yw  复制光标所在单词
        nyy 从当前行向下，总共n行，全部复制
        nyw 从当前单词向后，总共n个，全部复制
        p   粘贴
    027 vim删除文本常用命令(向后:包含当前   向前:不包含当前)
        x   删除光标所在位置的字符 == "Delete"
        X   删除光标所在位置的前一个字符
        nx  从当前字符向后(包含当前字符)，总共n个，全部删除
        nX  从当前字符向前(不包含当前字符)，总共n个，全部删除
        dw  删除光标所在位置的单词
        ndw 从当前单词向后，总共n个，全部删除
        d$  从当前字符向后(包含当前字符)，一直删除到行尾
        d0  从当前字符向前(不包含当前字符)，一直删除到行首
        dd  删除光标所在行
        ndd 从当前行向下，总共n行，全部删除
        nd+方向上键 删除当前行，向上再删n行，总共n+1行
        nd+方向下键 删除当前行，向下再删n行，总共n+1行
    028 vim其他常用命令
        r   替换光标所在位置的字符
            例如rz是指将光标所在位置的字符替换为x
        R   替换光标所到之处的字符，知道按下"Esc"键为止
        u   撤销上一次的操作
        U   取消对当前行所做的所有改变
        .   重复执行上一次的命令
        ZZ  保存文档后退出vim编辑器
        %   符号匹配功能，在编辑时若输入"%("，则系统会自动匹配相应的")"
            书上面是这么写，不过常用的是：
            当光标在"("字符上的时候，命令行模式，%，会自动跳到匹配的")"
    029 vim命令行工作模式切换到插入工作模式
        i   从光标所在的位置，开始输入字符
        I   光标所在行的行首，开始输入字符
        a   从光标所在位置的下一个字符，开始输入字符
        A   从光标所在行的行尾，开始输入字符
        o   增加一行，光标到新增行的开头
        O   当前行上面增加一行，光标到新增行的开头
    030 vim底行工作模式
        x   保存文件并退出vim(exit)
        x!  强制保存文件并退出vim
        w!  对于只读文件，强制保存修改的内容，但不退出vim
        E   在vim中穿过年间新的文件，并为文件命名
        N   在本vim窗口中打开新的文件
        w filename  另存为filename文件，不退出vim
        w! filename 强制另存为filename文件，不退出vim
        r filename  读入filename指定文件内容插入到光标位置(read)
                    插入的位置是，下一行开始输入文件的内容
                    原本的内容，自动向下移动
        set nu  在vim的每行开头处，显示行号
        s/pattern1/pattern2/g   当前行，g全部，没有g 替换第一个
        %s/pattern1/pattern2/g  所有行，全部替换
        num1,num2s/pattern1/pattern2/g  num1行到num2行
    031 vim配置
        a,  进入vim  -->  :echo $VIM
            查看vim配置文件所在位置 
        b,  gcc可能需要安装一些常用的头文件和库文件
            apt-get install build-essential
        c,  gcc对C语言的处理过程
            1,  预处理  处理头文件和宏定义 eg.#define #include #if等
            2,  编译    gcc先检查代码的规范性，确认没有语法错误
                        gcc再将C语言代码编译成汇编语言代码
            3,  汇编    gcc将刚刚得到的汇编语言用于输入，
                        产生具有.o扩展名的目标文件
            4,  链接    在本阶段中各目标文件被gcc放在可执行文件的适当位置
                        该程序引用的函数也放在可执行文件中(对使用共享库的程序稍有不同)
        d,  一个简单C语言程序的处理过程
            1,  预处理阶段：    
                    这个阶段过后，会生成预处理文件(*.i)
                    gcc把stdio.h头文件的部分内容插入到了文件中
            2,  编译阶段：
                    gcc会生成汇编代码文件hello.s
            3,  汇编阶段：
                    gcc把编译阶段生成的".s"文件转换成目标文件
            4,  链接阶段：
                  最关键因素是函数库
                  从源文件中可以看到在其中并没有定义"printf"的函数实现
                且在预编译中包含的"studio.h"中也只有该函数的声明，
                而没有定义函数的实现
                这是因为系统把这些函数的实现都放到名为libc.so.6的库文件中
                没有特别指定时，gcc会到系统默认的搜索路径"/usr/lib"下查找
                也就是链接到libc.so.6函数库中去，这样就能调用函数"printf"
                  以上就是链接的作用。
                  函数库有静态库和动态库两种：
                  静态库：
                      编译链接时，将库文件的代码全部加入可执行文件中，
                    因此生成的文件比较大，但运行时不再需要库文件，
                    其后缀名通常".a"。
                  动态库:
                      动态库与之相反，在编译链接时并没有将库文件的代码加入
                  可执行文件中，而是在程序执行时加载库，这样可以节省系统的
                  开销。一般动态库的后缀名为".so"，如前面所述的libc.so.6就是
                  动态库。
                  gcc在编译时默认使用动态库
    033 gcc中文件后缀
        C语言代码：     *.c
        预处理文件:     *.i
        汇编代码文件:   *.s
        目标文件:       *.o / a.out
    032 gcc的基础使用方法
        gcc [选项] 文件名
        -c  仅对源文件进行编译，不链接生成可执行文件。
            在对源文件进行查错或只需产生目标文件时，使用。
        -o filename 将经过gcc处理过的结果保存为filename。这个处理文件可以是
                    预处理文件、汇编文件、目标文件或者最终的可执行文件。假设
                    被处理的源文件为file1，如果这个选项被忽略，那么生成的
                    可执行文件的默认名称为a.out；目标文件的默认名为file1.o;
                    汇编文件的默认名为file1.s;生成的预处理文件发送到标准输出设备stdout
        -g / -gdb   在可执行文件中加入调试信息，方便进行程序的调试。如果使用
                    “-gdb”选项，表示加入gdb扩展的调试信息，以便使用gdb来进行调试。
        -O[0,1,2,3] 对生成的代码进行优化，括号中的部分为优化级别，默认的情况为
                    2级优化，0为不优化。优化和调试通常不兼容，同时使用"-g"和"-O"
                    选项经常会使程序产生奇怪的运行结果，所以不要同时用"-g"和"-O"
        -Idir   将dir目录加到搜索头文件的目录列表中去，并优先于gcc缺省的搜索目录。
                在有多个"-I"选项的情况下，按命令行上"-I"选项的前后顺序搜索，
                dir可使用相对路径
        -Ldir   将dir目录加到搜索"-L"选项指定的函数库文件的目录列表中去，并优先于
                gcc缺省的搜索目录。在有多个"-L"选项的情况下，按命令行上"-L"选项的
                前后顺序搜索，dir可使用相对路径
        -Iname  在链接时使用函数库name.a，链接程序在"-Ldir"选项指定的目录下，以及
                "/lib"，"/usr/lib"目录下寻找该库文件。在没有使用"-static"选项时，
                如果发现共享函数库name.so，则使用name.so进行动态链接
    033 gcc支持的与C语言相关的输入文件类型
        .c  C语言源程序，可以被gcc预处理、编译、汇编、链接
        .C .cc .cp .cpp .c++ .cxx    C++语言源程序，可以被gcc预处理、编译、汇编、链接
        .i  预处理后的C语言源程序，可以被gcc编译、汇编、链接
        .ii 预处理后的C++语言源程序，可以被gcc编译、汇编、链接
        .s  预处理后的汇编程序，可以被as汇编、链接
        .S  未预处理的汇编程序，可以被as预处理、汇编、链接
        .h  头文件，不进行任何操作
        .o  编译后的目标文件，传送给ld
        .a  目标文件库，传送给ld
    034 gcc的应用实例
        建立三个文件c001_main.c c001_sum.c c001_sum.h
        编译 gcc c001_main.c c001_sum.c -o c001
        github: https://github.com/zxwtry/store/tree/master/c/201606
    035 Linux C语言的调试工具 gdb
        file    装入想要调试的可执行文件
        kill    终止正在调试的程序
        list    列出产生执行文件的部分源代码
        next    执行一行源代码但不进入函数内部
        step    执行一行源代码而且进入函数内部
        run     执行当前被调试的程序
        quit    退出gdb
        watch   动态坚实一个变量的值
        make    不退出gdb而重新产生可执行文件
        call name(args) 调用并执行名为name、参数为args的函数
        return value    停止执行当前函数，并将value返回给调用者
        break   在代码里设置断点，使程序执行到此处被挂起
    036         

            

            


