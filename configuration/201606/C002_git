1,  准备
    1.1 安装
        a,  ubuntu 
	        apt-get install git
	        这条语句一般能够完全安装好
	        如果不行的话，一般是网络问题可以试试deb.tar(16/06/14)
        b,  老一点的Debian或ubuntu 
            apt-get install git-core
            原因是，之前有一个软件叫做GIT(GNU Interactive Tools),后来更名为gnuit
        c,  其他linux版本，通过源码安装
            ./config
            make
            sudo make install
        d,  Mac OS X和Windows多百度
    1.2 简单使用
        a,  初始化
                git init
                git remote add origin [git_url]
            或
            复制git clone [git_url]
        b,  设置user.name和user.email，还要添加id_rsa.pub
            git config --global user.name "zxwtry"
            git config --global user.email "zxwtry@qq.com"
            [system --> 作用域：整个电脑    /etc/gitconfig  ]
            [global --> 作用域：该用户      ~/.gitconfig    ]
            [       --> 作用域：当前项目    .git/config     ]
        c,  git add *
            git commit -am "添加的注释"
            git push origin master
        d,  查看版本信息和版本回溯
            git log --pretty=oneline
            git reset --hard 前几位
                      --soft
                      --mixed
            git reflog
            git reset --hard HEAD^1     向下走一位
        e,  一次后悔的机会
            git commit -am "注释信息" --amend
        f,  分支branch
            git branch          查看库中的所有分支，打*代表当前
            git branch dev  
            git checkout dev    建立一个新的branch
            git merge dev
            git branch --delete dev
            git push -u origin master  强制使用现在push的master
        g,  不同电脑，同一个项目
            git fetch --all
            git reset --hard origin/master
	1.3	20160718碰到的一个非常2的问题：
		github用ssh登录的步骤：
			git clone 
			ssh-keygen
			添加id_rsa.pub
		发现，不行，总是要输入密码。。。
		各种折腾，最后发现，自己git clone [url]中url是HTTPS的url
		诶，又乱折腾。。。
    1.3 如果github一个项目中，有非常多的废文件。希望能够从所有历史版本中删除这些
        文件，可以使用如下命名。
        git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch -r 文件夹' --prune-empty --tag-name-filter cat -- --all
        (如果是文件的话，去掉-r就行)
        git push origin master --force
        rm -rf .git/refs/original/
        git reflog expire --expire=now --all
        git gc --prune=now
        git gc --aggressive --prune=now
