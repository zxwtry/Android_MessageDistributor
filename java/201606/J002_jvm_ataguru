n001:	JVM
	    JVM是一台虚拟机，使用软件模拟Java字节码的指令集。除了PC寄存器，没有复杂寄存器。
	    JVM:    JRockit和Hotspot
	    在Hotspot基础上，移植JRockit优秀特性
n002:    JVM规范
	    1,	Class文件类型
	    2, 	运行时数据
	    3,	帧栈
	    4,	虚拟机的启动
   	 	5,	虚拟机的指令集
n003:    Java堆
		1,	和程序开发密切
		2,	对象都在Java堆中
		3,	线程共享
n004:	Java栈
		1,	线程私有
		2,	方法调用：新的帧
n005:	局部变量表 包含参数和局部变量
		1,	static 和实例方法是不同的。
n006:	Java没有寄存器，所有参数传递使用操作数栈
n007:	栈上分配的好处，不会出现内存泄漏。
n008:	-server -Xmx10m -Xms10m
		-XX:+DoEscapeAnalysis -XX:+PrintGC
		栈上分配 
		和
		-server -Xmx10m -Xms10m
		-XX:-DoEscapeAnalysis -XX:+PrintGC
		堆上分配
		是很不同的。	
n009:	Java栈-栈上分配
		1,	小
		2,	自动回收
		3,	线程私有
n010:	主内存和线程私有内存
n011:	volatile比重量级锁性能好。
		多个线程对volatile进行写的时候，不安全。
n012:	保证可见性方法：
		一个线程修改了变量，其他线程可以立即知道
		1,	volatile
		2,	synchronized(unlock之前，写回内存)
		3,	final
n013:	有序性：
		1,	本线程内，有序
		2,	线程外观察，无序(指令重排，主内存同步延迟)
n014:	指令重排的基本原则：
		1,	程序顺序原则
		2,	volatile，先写后读
		3,	锁规则，解锁先于加锁
		4,	传递性
		5，	线程start先于all
		6,	线程所有操作先于线程的终结(Thread.join())
		7,	线程的中断(interrupt())先于被中断线程的代码
		8,	对象的构造函数执行结束先于finalize()方法
n015:	Trace跟踪参数
		1,	-verbose:gc
		2,	-XX:+PrintGC
		3,	-XX:+PrintGCDetails
		4,	-XX:+PrintGCTimeDetails
		5,	-Xloggc:log/gc.log
		6,	-XX:+TraceClassLoading
		7,	-XX:+PrintClassHistogram
			按下Ctrl+Break后，打印类信息
		8,	-Xmx   -Xms
			最大堆 最小堆
		9,	-Xmn	-XX:NewRatio
			新生代	年老代:新生代(eden+2*s)
		10,	-XX:SurvivorRatio
			eden : survivor
			eg 8
			eden 8/10
			s	 1/10
			s	 1/10
		11,	-XX:+HeapDumpOnOutOfMemoryError
			OOM时导出堆到文件
		12,	-XX:+HeapDumpPath
			导出OOM的路径
		13,	-XX:OnOutOfMemoryError
			在OOM时，执行一个脚本
			=/////.bat %p
		14,	-XX:PermSize	-XX:MaxpermSize
			永久区初始		最大空间
			CGLIB
		15,	-Xss
			栈

n016:	问题：
		1,	-Xmx和-Xms的比例
		2,	JRE瘦身
n017:	GC的对象是堆空间和永久区
n018:	引用计数
		1,	标记使用数量
		2,	COM
			ActionScrpt3
			Python
		3,	加法减法
			循环引用
n019:	标记-清除
		1,	通过根节点，标记可达对象
		2,	清除不可达对象
n020:	标记-压缩
		1,	标记，移动存活对象到一边
		2,	清除其余
n021:	复制
		1,	不适用存活对象多的，如年老代
		2,	两块内存空间
n022:	可触及
		1,	可触及
			从根节点
		2,	可复活
			finalize()中可能复活该对象
		3,	不可触及
			finalize()后，可能进入不可触及
		*,	经验：
			避免使用finalize()，操作不慎可能导致错误。
			优先级低，何时被调用不确定
			可以使用try-catch-finally来代替
n023:	根
		1,	栈中的对象
		2,	方法区中静态成员或者常量引用的对象(全局对象)
		3,	JNI方法栈中引用的对象
n024:	Stop-The-World
		1,	全局暂停
		2,	所有Java代码停止，native代码可以执行，但不能和JVM交互
		3,	多半由于GC引起
			*	Dump线程
			*	死锁检查
			*	堆Dump
		4,	危害
			暂停服务
			HA系统，主备切换，主备同时存在。
n025:	eden	s0	s1	tenured
n026:	GC参数-串行收集器
		1,	最古老，最稳定
		2,	效率高
		3,	可能会产生较长的停顿
		4,	-XX:+UseSerialGC
			新生代，老年代使用串行回收
			新生代复制算法
			老年代标记-压缩
n027:	GC参数-并行收集器
		1,	ParNew:
			-XX:+UseParNewGC
			新生代并行
			老年代串行
		2,	Serial收集器新生代的并行版本
		3,	复制算法
		4,	多线程，需要处理器支持
		5,	-XX:ParallelGCThreads	限制线程数量
		6,	多线程不一定快
n028:	GC参数-并行收集器
		1,	Parallel收集器
		2,	类似ParNew
		3，	新生代复制算法
		4,	老年代 标记-压缩
		5,	更加关注吞吐量
		6,	-XX:+UseParallelGC
			使用Parallel收集器+串行老年代
		7,	-XX:+UseParallelOldGC
			使用Parallel收集器+并行老年代
n029:	GC参数-并行收集器
		1,	-XX:MaxGCPauseMills
			最大停顿时间
		2,	-XX:GCTimeRatio
			0-100
			非垃圾收集时间占总时间的比
			默认99
		3,	1和2是有矛盾的。停顿时间和吞吐量
n030:	GC参数-CMS收集器
		1,	Concurrent Mark Sweep并发标记清除
		2,	标记-清除算法
		3,	交替(和用户线程)
		4,	与标记-压缩相比，并发阶段会降低吞吐量
		5,	年老代收集器（新生代使用ParNew）
		6,	-XX:+UseConcMarkSweepGC
		7,	着重实现了标记的过程可分为
			a,	初始标记
			b,	并发标记(和用户线程一起)
			c,	重新标记
			d,	并发清除
		8，	特点；
			a,	降低停顿
			b,	影响整体吞吐量和性能
			c,	清理不彻底
			d,	不能在空间快满时再清理
				-XX:CMSInitiatingOccupancyFraction (百分比)
				concurrent mode failure
				使用串行收集器作为后备
		9,	-XX:+UseCMSCompactAtFullCollection Full GC后进行一次整理
			-XX:CMSFullGCsBeforeCompaction	几次Full GC
			-XX:ParallelCMSThreads	CMS线程数量
		10,	减轻GC压力
n031:	串行并行	标记-压缩
n032:	类装载器
		1,	class装载验证流程
		2,	什么是类装载器ClassLoader
		3,	JDK中ClassLoader默认设计模式
		4,	打破常规模式
		5,	热替换
n033:	class装载验证流程
		1，	加载
		2,	链接
			a,	验证
			b,	准备
			c,	解析
		3,	初始化
n034:	class装载验证流程-加载
		1,	装载类的第一个阶段
		2,	取得类的二进制流
		3,	转为方法区数据结构
		4,	在Java堆中生成对应的java.lang.Class对象
n035:	class装载验证流程-验证
		目的：	保证Class流的格式是正确的
		1,	文件格式的验证
			是否以0xCAFEBABE开头
			版本号是否合理
		2,	元数据验证
			是否有父类
			继承了final类
			非抽象类实现了所有的抽象方法
		3,	字节码验证(复杂)
		4，	符号引用验证
			常量池中描述类是否存在
			权限
n036:	class装载验证流程-链接准备
		1,	分配内存，并为类设置初始值(方法区中)
			public static int v = 1;
				在准备阶段，v会被设置成0
				在初始化的<clinit>中才会被设置为1
			public static final int v = 1;
				在准备阶段设置为1
n037:	class装载验证流程-链接解析
		1,	符号引用替换为直接引用
						  内存地址
n038:	class装载验证流程-初始化
		1,	执行类构造器<clinit>
			static变量 赋值语句
			static{} 语句
		2,	子类的<clinit>调用前保证父类的<clinit>被调用
		3,	<clinit>是线程安全的
n039:	Java.lang.NoSuchFieldError可能在那些阶段出现
n040:	什么是类装载器ClassLoader
		1,	抽象类
		2,	实例负责读入Java字节码将类装载到JVM中
		3,	可以定制，满足不同的字节码流获取方式
		4,	负责类装载过程中的加载阶段
n041:	ClassLoader的重要方法：
		1,	public Class<?> loadClass(String name) throws ClassNotFoundException
			装入并返回一个Class
		2,	protected final Class<?> defineClass(byte[] b, int off, int len)
			定义一个类，不公开调用
		3,	protected Class<?> findClass(String name) throws ClassNotFoundException
			loadClass回调该方法，自定义ClassLoader的推荐做法
		4,	protected final Class<?> findLoadedClass(String name)
			寻找已经加载的类
n042:	JDK中ClassLoader默认设计模式-分类/协同工作
		1,	BootStrap ClassLoader 	(启动ClassLoader)					rt.jar / -Xbootclasspath
		2,	Extension ClassLoader 	(扩展ClassLoader)					%JAVA_HOME%/lib/etc/*.jar
		3,	App ClassLoader 		(应用ClassLoader/系统ClassLoader)	classpath下
		4,	Custom ClassLoader 		(自定义ClassLoader)
		5,	每个ClassLoader都有一个Parent作为父亲，BootStrap ClassLoader是没有的。
		6,	自底向上检查是否已经加载
		7,	自顶向下尝试加载类
n043:	JDK中ClassLoader默认设计模式-协同工作
		protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
			synchronized (getClassLoadingLock(name)) {
				Class c = findLoadedClass(name);
				if (c == null) {
					long t0 = System.nanoTime();
					try {
						if (parent != null) {
							c = parent.loadClass(name, false);
						} else {
							c = findBootstrapClassOrNull(name);
						}
					} catch (ClassNotFoundException e) {

					}
				}
			}
		}
n044:	是否能只用反射，仿照上面的写法，将类注入启动ClassLoader呢?
		上面是指store/demo/201607/D011
n045:	1,	自底向上检查类是否已经加载
		2,	自顶向下尝试加载类
		双亲模式的问题：
			1,	顶层ClassLoader，无法加载底层ClassLoader的类。
			2,	Java框架(rt.jar)如何加载应用的类?
			3,	javax.xml.parsers包中定义了xml解析的类接口Service Provider Interface SPI位于rt.jar即接口在启动ClassLoader中。而SPI的实现类，在AppLoader。
n046:	Thread.setContextClassLoader()
		1,	上下文加载器
		2,	是一个角色
		3,	用以解决顶层ClassLoader无法访问底层ClassLoader的类的问题。
		4,	基本思想，在顶层ClassLoader中，传入底层ClassLoader的实例。
n047:	ClassLoader cl;
		cl.loadClass(className);	//使用上下文加载器
		上下文加载其可以突破双亲模式的局限性。
n048:	双亲模式的破坏：
		1,	双亲模式是默认的模式，但不是必须这么做。
		2,	Tomcat的WebappClassLoader就会先加载自己的Class，找不到再委托parent
		3,	OSGi的ClassLoader形成网状结构，根据需要自由加载Class
n049:	破坏双亲模式例子-先从底层ClassLoader加载
		OrderClassLoader的部分实现
		protected synchronized Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
			// First, check if the class has already been loaded
			Class re = findClass(name);
			if (re == null) {
				System.out.println("无法载入类："+name+"需要请求父加载器");
				return super.loaderClass(name, resolve);
			}
			return re;
		}
		proteceted Class<?> findClass(String className) throws ClassNotFoundException {
			Class clazz = this.findLoadedClass(className);
			if (null ==  clazz) {
				try {
					String classFile = getClassFile(className);
					FileInputStream fis = new FileInputStream(classFile);
					FileChannel fileC = fis.getChannel();
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					WritableByteChannel outC = Channels.newChannel(baos);
					ByteBuffer buffer = ByteBuffer.allocateDirect(1024);
					// 这里省略了很多代码
					fis.close();
					byte[] bytes = baos.toByteArray();
					clazz = defineClass(className, bytes, 0, bytes.length);
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return clazz;
		}
n050:	热替换
		含义：
		1,	当一个class被替换后，系统无需重启，替换的类立即生效
		2,	例子:
			public class CVersionA {
				public void sayHello() {
					System.out.println("hello world!(version A)");
				}
			}
			PHP天生热替换
			a,	DoopRun不停调用CVersionA.sayHello()方法，因此有输出：
			b,	在DoopRun的运行过程中，替换为CVersionA为：
				public class CVersionA {
					public void sayHello() {
						System.out.println("hello world!(version B)");
					}
				}
			c,	替换后，DoopRun的输出变为
				hello world!(version B)
n051:	性能监控工具
		1,	系统性能监控
			确定系统运行的整体状态，基本定位问题所在
		2,	Java自带的工具
			查看Java程序运行细节，进一步定位问题
		3,	实战分析
n052:	linux uptime
		系统时间	运行时间	连接数	1,5,15分钟内的系统平均负载(运行队列中的平均进程数)
n053:	linux top
n054:	vmstat [采样频率] [采样次数]
		可以统计系统的CPU，内存，swap，io等情况
		CPU占用率很高，上下文切换频繁，说明系统有线程正在频繁切换。
n055:	pidstat
		1,	细致观察进程
		2,	apt-get install sysstat
		3,	监控CPU
		4,	监控IO
		5,	监控内存
		6,	pidstat -p 2962 -u 1 3
			-p		进程
			2962	进程id
			-u		查看cpu
			
			pidstat -p 2962 -u 1 3 -t
			-t		显示线程
		7,	pidstat -p 3165 1 3 -d -t
			-d 		硬盘IO
n056:	Windows pslist
		1,	命令行工具
		2,	可用于自动化数据收集
		3,	显示java程序的运行情况
		pslist -d
n057:	Java自带的工具-jps
		1,	列出Java进程，类似ps
		2,	参数-p可以指定jps只输出进程ID，不输出类的短名称
		3,	参数-m可以用于输出传递给Java进程(主函数)的参数
		4,	参数-l可以用于输出主函数的完整路径
		5,	参数-v可以显示传递给JVM的参数
n058:	jinfo
		1,	可以用来查看正在运行的Java应用程序的扩展参数，甚至支持在运行时，修改部分参数
		2,	-flag <name> : 打印指定JVM的参数值
		3,	-flag [+|-] <name> : 设置指定JVM参数的布尔值
		4,	-flag <name> = <value> : 设置指定JVM参数的值
		5,	显示了新生代对象晋升到老年代对象的最大年龄
			jinfo -flag MaxTenuringThreshold 2972
			输出：-XX:MaxTenuringTreshold=15
		6,	显示是否打印GC详细信息
			jinfo -flag PrintGCDetails 2972
			输出：-XX:-PrintGCDetails
		7,	运行时修改参数，控制是否输出GC日志
			jinfo -flag PrintGCDetails 2972
			输出：-XX:-PrintGCDetails
			jinfo -flag +PrintGCDetails 2972
			jinfo -falg PrintGCDetails 2972
			输出：-XX:+PrintGCDetails
n059:	jmap
		1,	生成Java应用程序的堆快照和对象的统计信息
		2,	jmap -histo 2972 >c:\s.txt
n060:	Dump堆
			jmap -dump:format=b,file=c:\heap.hprof 2972
n061:	jstack
		1,	打印线程dump
		2,	-l	打印锁信息
		3,	-m	打印java和native的帧信息
		4,	-F	强制dump，当jstack没有响应时使用
		5,	jstack 120 >> C:\a.txt
n062:	JConsole
		1,	图形化监控工具。
		2,	可以查看Java应用程序的运行概况。监控堆信息，永久区使用情况，类加载情况等。
n063:	Visual VM
		1,	Visual VM是一个功能强大的多合一故障诊断和性能监控的可视化工具。
		2,	性能监控：找到占用CPU时间最长的方法
		3,	死锁  红色
		4,	分析堆Dump文件
