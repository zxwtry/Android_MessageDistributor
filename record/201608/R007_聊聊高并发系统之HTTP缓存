source:	geek.csdn.net/news/detail/96586
title:	聊聊高并发系统之HTTP缓存
01	例子
	访问一个url，Status Code: 200
	F5刷新，Status Code: 200和304都有
	304：表示服务端文档没有修改，浏览器缓存的内容还是最新的。
02	在Java应用层控制浏览器缓存
	Spring MVC缓存测试代码：
		@RequestMapping("/cache")
		public ResponseEntity<String> cache(HttpServletRequest request,
						//为了测试方便，此处传入文档最后修改时间
						@RequestParam("millis")long lastModifiedMillis,
						//浏览器验证文档内容是否修改时传入的Last-Modified
						@RequestHeader(value="If-Modified-Since", request=false) Date ifModifiedSince) {
			//当前系统时间
			long now = System.currentTimeMillis();
			//文档可以在浏览器端/proxy上缓存多久
			long maxAge = 20;
			
			//判断内容是否修改了，使用等值判断
			if (ifModifiedSince != null && ifModifiedSince.getTime() == lastModifiedMillis) {
				return new ResponseEntity<String>(HttpStatus.NOT_MODIFIED);
			}
			DateFormat getDateFormat = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss 'GMT'", Local.US);
			String body = "<a href=''>点击访问当前链接</a>";
			MultiValueMap<String, String> headers = new HttpHeaders();
			
			//文档修改时间
			headers.add("Last-Modified", gmtDateFormat.format(new Date(lastModifiedMillis)));
			
			//当前系统时间
			headers.add("Date", gmtDateFormat.format(new Date(now)));

			//过期时间 http 1.0 支持
			headers.add("Expires", gmtDateFormat.format(new Date(now+maxAge)));
			
			//文档生存时间 http 1.1 支持
			headers.add("Cache-Control", "max-age="+maxAge);

			return new ResponseEntity<String>(body, headers, HttpStatus.OK);
		}
03	第一次访问的时候，Status Code: 200
	缓存控制参数：
		Last-Modified：	表示文档最后被修改的时间。去服务器验证时候，使用这个。
		Expires：	http/1.0规范定义，表示文档在浏览器中的过期时间。
					当缓存的内容超过这个时间，则需要重新去服务器获取最新的内容。
		Cache-Control：	http/1.1规范定义，表示浏览器缓存控制
						max-age=20表示文档可以在浏览器中缓存20秒
		Cache-Control的优先级高于Expires
		一般情况：Expires=当前系统时间(Date) + 缓存时间(Cache-Control:max-age)
04	F5刷新
	此时发送时有一个If-Modified-Since请求头，其值是上次请求相应中的Last-Modified
		即浏览器拿这个时间去服务器端验证内容是否发生了变更。
	接着，会接受到响应信息：
		Status Code：304
05	Ctrl+F5强制刷新
	此时发送时不会发送If-Modified-Since，并带上Cache-Control:no-cache和Progma:no-cache
		即告诉服务器给我一份最新的内容
06	from cache：从A页面跳转到A页面或者从A页面跳转到B页面时
	如果内容还在缓存时间之内，直接从浏览器获取内容，而不去服务器验证。
07	Age：一般用于代理层(如CDN)
	强制刷新(Ctrl+F5)后Age不断变化，表示此内容在代理层从缓存到现在经理多长时间，即在代理层缓存了多长时间。
08	Vary：一般用于代理层(如CDN)
	用于代理层和浏览器协商什么情况下使用哪个版本的缓存内容(比如压缩版和非压缩版)
		即什么情况下，后续请求才能使用代理层缓存的该版本内容
	比如，响应中Content-Encoding:gzip，Vary:Accept-Encoding缓存代理层缓存了gzip版本的内容；
		那么后续的请求在请求时Accept-Encoding头部中包含gzip时才能使用该代理层缓存。
09	Via：一般用于代理层(如CDN)
	表示访问到最终内容经过了哪些代理层，用的是什么协力，代理层是否缓存命中率等；还可以进行一些故障检测。
	Response Headers:
		Via: http/1.1 BJ-UNI-1-JCS-....
10	ETag：
	@RequestMapping("/cache/etag")
	public ResponseEntity<String> cache(
					HttpServletRequest request,
					HttpServletResponse response,
					//浏览器验证文档内容的实体If-None-Match
					@RequestHeader(value="If-None-Match", required=false)String ifNoneMatch) {
		//当前系统时间
		long now = System.currentTimeMillis();
		//文档可以在浏览器端/proxy上缓存多久
		long maxAge = 10;
		
		String body = "<a href=''>点击访问当前链接</a>";

		//弱实体
		String etag = "W/\"" + md5(body) + "\"";

		if (StringUtils.equeals(ifNoneMatch, etag)) {
			return new ResponseEntity<String>(HttpStatus.NOT_MODIFIED);
		}

		DateFormat gmtDateFormat = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss 'GMT'", Locale.US);
		MultiValueMap<String, String> headers = new HttpHeaders();

		//ETag http 1.1支持
		headers.add("ETage", etag);
		//当前系统时间
		headers.add("Date", gmtDateFormat.format(new Date(now)));
		//文档生存时间 http 1.1支持
		headers.add("Cache-Control", "max-age="+maxAge);
		return new ResponseEntity<String>(body, headers, HttpStatus.OK);
	}
	其中ETag用于发送到服务器进行内容变更验证的，而Catch-Control是用于控制缓存时间的(浏览器，代理层等)。
	此处使用弱实体W\" 343sda"，弱实体(" 343sda")只要内容语义没变即可，比如内容的gzip版和非gzip版可以使用弱实体验证；
		强实体指字节必须完全一致(gzip和非gzip情况是不一样的)。
		推荐首先选择使用弱实体。
	nginx在生成etag时使用的算法是Last-Modified+Content-Length计算的：
		ngx_sprintf(etag->value.data, "\"%xT-%xO\"", r->headers_out.last_modified_time,
													r->headers_out.content_length_n)
	到此简单的基于文档修改时间和过期时间的缓存控制介绍完了。
	在内容型相应，大多数根据内容的修改时间进行缓存控制，ETag根据实际需求而定。
	还可以使用html Meta标签控制浏览器缓存，但是对于代理层缓存无效，因此不建议使用。
